
Data: Data is a collection of facts related to any object.
data can be an image, audio, video, text, etc.
 
Database: A database is an organized collection of logically related data.
a contractor having worker data like name, address, and phone number.
-> Database->Processed information.

Dbms:
    -> Dbms stands for database management system it is software that is an intermediator between the user and the database,  
      and it provides a systematic approach to storing, updating, deleting and inserting data. 

Types of DBMS:
 
(1)Relational DBMS (RDBMS): Organizes data into tables (relations) that 
can be linked by common fields.   

Examples include MySQL, PostgreSQL,  
Oracle, and Microsoft SQL Server.  

(2)Hierarchical DBMS: Organizes data in a tree-like structure.  
Example: IBM Information Management System (IMS). 

Network DBMS: Organizes data as a graph structure, allowing more complex relationships. 
Example: Integrated Data Store (IDS). 

Object-oriented DBMS (OODBMS): Stores data in objects, similar to object-oriented programming. 
Example: ObjectDB. 

NoSQL DBMS: Designed for unstructured data, allowing for flexibility and scalability.  
Examples include MongoDB, Cassandra, and Redis.  
 
DIFFERENCE BETWEEN DBMS AND RDBMS 

			DBMS				RDBMS
Definition	Database Management System	Relational database management system
Data Structure	Hierarchical, network, etc.	Tabular with relationships (tables)
Normalization	May not support normalization	Supports normalization
Scalability	Generally less scalable		Highly scalable
Examples	IBM IMS, Integrated Data Store	MySQL, PostgreSQL, Oracle, SQL Server 

There are 5 types of DBMS Languages

	1 DDL-Data Definition Language
	2 DML-Data Manipulation Language
	3 DCL-Data Control Language
	4 TCL -Transaction Control Language
	5 DQL-Data Query Language

1 DQL
  1 DDL-DDL statements are used to specify the schema of the 
    database.
  	DDL commands-create, drop, alter, rename
  	Syntax-create database Db_name
  	create database School
  
	Table Creation
  	table statement is used  to create a table
  	create table table_name( column_name datatype,column_name datatype,.....)
  	create table tb_staff(s_name varchar(10),s_id int,s_mobile int))
  	To see Table Structure 
  	DESCRIBE staff;

	DROP TABLE Statement
  	drop statement is used to delete a table
  	drop table tb_name
  	drop table tb_staff

	ALTER TABLE Statement
  	Alter statement is used to add, modify, and delete the column in the existing table.
  	ALTER TABLE - ADD Column
  	alter table tb_name(column_name Data_type)
  	alter table tb_staff salary int

	ALTER TABLE - DROP COLUMN
  	The Alter command is used to delete a column in an existing table
  	Syntax-
  	alter table table_name drop column_name
  	alter table tb_staff drop salary;

	ALTER TABLE-MODIFY COLUMN
  	It is used to change a data type in a column
  	alter table table_name existing_column_name change datatype name
  	alter table table _name

	TRUNCATE-TO DELETE TABLE DATA(EMPTY TABLE)
  	Syntax-
  	truncate table_name;
  	ex truncate tb_staff;
-------------------------------------------------------------------------
	2 DML-DML Statements are used to manipulate/change data in the database. 
    	DML Commands-insert, update, delete
    	Insert statement:- Insert statement is used to add a new record in a table
    	Syntax -insert into table_name (column_name1,column_name2......)values(C1_value,c2_value,c3_value3)
    	Ex-insert into table_name (s_name,s_id,s_mobile) values("Rohit",1,812056)
    	select *from table_name;

    	UPDATE COMMAND: Update command used to modify the existing record of a table.
    	update table_name set column1=value,coulumn2=value2,column3=value3 where condition
    	update tb_staff set s_name="Rohit" where s_id=101;

    	A delete statement is used to delete a record in the table
    	delete from table_name where condition
    	EX- delete from tb_staff where s_id="101";

3   	DQL-DQL Stands for Data Query Language.
        ->DQL statement is used to retrieve a record from a table.
        syntax
        select * from table_name where condition
        Ex select S_name * from tb_staff where s_id="101"
----------------------------------------------------------------------------------------------------------
4   DCL -
	*Full-form Data control language
	* Dcl statements are used to control user access privileges
	* Privileges-Insert, update, delete, All privileges, etc

	* There are two commands in DCL Statements-
 	1 GRANT Command-It is used to give privileges to the user
		Syntax-
		Grant Privileges on DataBase_name.Table_name to yogesh@hostName;
		Ex-
		GRANT SELECT ON school. staff to yogesh@localhost;

		
 	2 REVOKE Command - The REVOKE statement is used to remove permission/privileges from a user that was previously granted
		Syntax

		REVOKE PRIVILEGES ON DATABASE_NAME.TABLE_NAME FROM USER_NAME@HOSTNAME;

		EX

		REVOKE SELECT ON school. staff from yogesh@hostname;
-------------------------------------------------------------------------------------------------------------------------------------
	
C:\Program Files (x86)\MySQL\MySQL Server 8.0\bin> mysql -u your_username -p// to log in mysql user

	Extra Commands
	User Creation
 	 CREATE USER 'username'@'hostname' IDENTIFIED BY 'password';
	To Drop user
	DROP USER 'username'@'hostname';
	Ex
	DROP USER yogi@localhost;
  	create database yo;
	To see User
 	select user from mysql.user;
	Show databases
 	 SHOW TABLES FROM urdatabase_name;
	Select database
	  USE clg;
 	 show databases;
	TO SEE tables
	show tables;
 	 Exit MySQL/logout user from mysql
   	 \q
	Note *After executing the REVOKE statement, you need to run FLUSH PRIVILEGES; to apply the changes immediately:
------------------------------------------------------------------------------------------------------------------------------
	
	
	5. TCL stands for Transaction control language.
	TCL statements are used to control transactions in the database.
	There are two tcl statements-
	* COMMIT- This command is used to permanently save the changes made during the current transaction.
		note -commit command remove savepoint
	     COMMIT;
	* ROLLBACK: This command is used to undo the changes made during the current transaction.
	     ROLLBACK;
	* ROLLBACK TO SAVEPOINT: This command rolls back the current transaction to a specified savepoint.
	      ROLLBACK TO SAVEPOINT savepoint_name;
	- Create a savepoint
	SAVEPOINT savepoint_name;

	-- More SQL statements modifying data

	-- If something goes wrong, roll back to the savepoint
	ROLLBACK TO SAVEPOINT savepoint_name;

	-- Continue with the transaction
	-- If everythin

	Histroy
	SHOW VARIABLES LIKE 'autocommit';
	set autocommit=0;
	show databases;
	use yogesh
	show tables
	desc person

	rollback;
	insert into person (id, P_name) values(2,"ruchika"),(3,"sam"),(4,"vikash"),(5,"chohansir"),(6,"manik"),(7,"bhatiya")
	savepoint A7;
	insert into person (id, P_name) values(14,"ruchika"),(15,"sam"),(16,"vikash"),(17,"chohansir"),(18,"manik"),(19,"bhatiya")
	select * from person
	savepoint A19
	insert into person (id, P_name) values(20,"ruchika"),(21,"sam"),(22,"vikash"),(23,"chohansir")
	select * from person;
	rollback to savepoint A7

DBMS Key
7 types of key
ACC -SPUF
1   Alternate Key-jo candidate key primary key nhi banti use alternane key hoti h
-- Create users table
CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) UNIQUE,  -- Alternate Key
    email VARCHAR(100) UNIQUE,     -- Primary Key
    full_name VARCHAR(100),
    birthdate DATE
);

-- Insert data into the users table
INSERT INTO users (user_id, username, email, full_name, birthdate) 
VALUES (1, 'john_doe', 'john@example.com', 'John Doe', '1990-01-15');

2   Composite key
3   candidate key
4   super key
5   primary key
6   unique key
7   foreign key

1 Super key- a set of attributes that can uniquely identify a record

Ex (P_id,P_name)

2 Candidate Key-
* Minimal set of super key.
* In a table, there can be multiple candidate keys
* Each candidate key must be unique across all records in the table.
* The candidate key is a potential primary key but is not necessarily chosen as the primary key.
Ex P_id
3 Primary Key
 the primary key has two property
 1>Unique
 2>NotNull
Ex UID
3 Foreign key-A foreign key is a column in one table that references
the primary key or a unique key in another table, establishing a relationship between the two tables in a relational database.
CREATE TABLE students (
    student_id INT PRIMARY KEY,
    student_name VARCHAR(50)
);
create table Booking(
Book_id int primary key,
date_of_issue date,
foreign key (student_id) REFERENCES student(student_id));

Composite key- A composite key is the combination of two or more attributes that can uniquely a record.
CREATE TABLE student_enrollment (
    student_id INT,
    course_id INT,
    enrollment_date DATE,
    PRIMARY KEY (student_id, course_id)
);

What is a Unique Key?
Unique Keys are the keys that define the record uniquely in the table. 
It is different from Primary Keys, as Unique Key can contain one NULL value but Primary Key does not contain any NULL values.

Triggers in MySQL
trigger is a special type of stored procedure that occurs on a certain event response.
Syntax-
CREATE TRIGGER TRIGGER_NAME TRIGGER_TIME TRIGGER_EVENT 
ON TABLE_NAME FOR EACH ROW
BEGIN
--VARIABLE DECLAERTION
--TRIGGER CODE
END;
or

A trigger is a set of instructions or actions
automatically performed ("triggered") in response to certain events on a particular table.
Each Trigger is associated with the table activated on any DML statement such as INSERT, UPDATE, or DELETE.

There are two types of triggers:

1 BEFORE Triggers:

These triggers are executed before the triggering event (e.g., before an INSERT, UPDATE, or DELETE operation).
They can be used to validate or modify the data before it is actually updated in the table.


2 AFTER Triggers:

These triggers are executed after the tr
has occurred.
They are commonly used for tasks such as updating other tables, logging changes, or sending notifications.

Syntax-
CREATE TRIGGER TRIGGER_NAME TRIGGER_TIME TRIGGER_EVENT 
ON TABLE_NAME FOR EACH ROW
BEGIN
--VARIABLE DECLAERTION
--TRIGGER CODE
END;

Example
create database bank;
use bank;
create table Accnt(Acc_no int primary key auto_increment,acc_name varchar(20));
create table balance(Acc_no int,amt decimal,foreign key(Acc_no) references Accnt(Acc_no));
delimiter //
create trigger tig after insert on Accnt for each row 
begin
insert into balance (Acc_no,amt) values(new.Acc_no,1000);
end
//

select * from Accnt;
select * from balance;
insert into Accnt (acc_name) values('rohit');
-----------------------------------------------------------------------------------------------------------------------------

Stored Procedure -

	* A stored procedure is a collection of pre-compiled SQL statements
	* Stored Procedures are created to perform one or one DML operation on the Database.

Here are some key characteristics and benefits of stored procedures:

	Encapsulation: Stored procedures allow you to encapsulate a set of SQL statements or procedural logic into a single unit, making it easier to manage and maintain.

	Reusability: Once created, stored procedures can be reused in multiple parts of an application or by different applications. This promotes code reuse and helps maintain consistency.

	Performance: Stored procedures are precompiled and stored in a compiled form, which can improve performance as they reduce the overhead of parsing and compiling the SQL statements each time they are executed.

	Security: Stored procedures can be used to control access to data by defining and controlling the execution of specific operations. Users may only have permission to execute a stored procedure and not direct access to the underlying tables.

	Modularity: Stored procedures support modular programming by breaking down complex logic into smaller, more manageable units. This can enhance code readability and maintenance.

	Transaction Management: Stored procedures can be used to wrap multiple SQL statements within a transaction, ensuring that either all statements within the procedure execute successfully or none at all.

* To see the list of procedure
	SHOW PROCEDURE STATUS;
* To delete the procedure
	DROP PROCEDURE [IF EXISTS] procedure_name;
	ex-use school
	drop procedure if exists enroll;
----------------------------------------------------------------------------------------------------------------------------------------
Syntax
EX-1	delimiter //
	create procedure procedure name([in | OUT | INOUT] PARAMETER_name datatype)
	BEGIN
	Declear_Section
	Executable_section
	//
EX-2
	delimiter //
create procedure add_student (in sname varchar(70))
begin
insert into student (sname) values(sname);
end
//

* To call procedure
call add_student("Rohit")
to see data
select * from student
EX 3
delimiter //
create procedure enroll_student(in sid bigint,crs_id varchar(5),crs_name varchar(10),crs_fees decimal)
begin
insert into enroll(sid,crs_id,crs_name,crs_fees,rgstrd)values(sid,crs_id,crs_name,crs_fees,now());
end
//
To call
call enroll_student(1,"CS-01","Computer",60000)

EX-3
delimiter //
create procedure  submit_fees(enid bigint,sfess double)
begin
insert into payment(enid,sfess,sdate)values(enid,sfees,now());
end
//
call submit_fees(4,5000)
-------------------------------------------------------------------------------------------------------------------------------------

In Parameter: 
in parameter ka use input parameter ki tarah kiya jata h
isme jab ham procedure ko call karte h tab  parameter ki value ko procedure ki body m execute ho rahe code k liye use kiya jata h .

Ex
create database bank;
use bank;
create table student(S_id int primary key auto_increment,S_name varchar(10));
delimiter //
create procedure Put_Data(in S_Name varchar(10))
begin
insert into student(S_name) values(S_Name);
end
//

delimiter //
create procedure Get_Data(in n int)
begin
select * from student limit n;
end
//
Call Procedure
call Put_Data('rohit');
call Get_Data(1);

OUT Parameter:
OUT Parameter ka use OUT Put parameter ki tarah kiya jata h.
Isme ham kisi procedure ki value ko procedure ke bahar bhi use kar skte h.
delimiter //

create procedure max_percent3(out m int)
begin
select max(percentage) into m from student;
end
//
call max_percent3(@M);
select @M
--------------------------------------------------------------------

INOUT-
Is parameter ka use in parameter aur out parameter dono ki tarah kiya jata h.
Ex

	delimiter //
	create procedure P(inout vari)
	begin
	select S_name into vari from student where percentage >vari;
	end
	//
	call p(@outdata)
)

Stored Function:

* In MySQL, a function is a set of SQL statements.
* it is associated with the database.
* a function must return a single value but the procedure can be or not.
* a function uses only input parameters but the procedure uses in, out,inout parameter
* function can be called within  the procedure but procedure can't be called within the function.

TO SEE FUNCTION
SHOW FUNCTION STATUS;
To see the source code of a specific function
SHOW CREATE FUNCTION your_function_name;
TO DELETE FUNCTION
DROP FUNCTION [IF EXISTS] function_name;

Deterministic Keyword: DETERMINISTIC: This indicates that the function is deterministic, 
meaning that it should produce the same result for the same input.
JO INPUT DIYA H UNKA RESULT HAMESHA UNHI DATA TYPE KA HOGA.

//FUNCTION SAME VALUE KO RETURN NHI KAREGA

 SYNTAX-
	DELIMITERS //
	CREATE FUNCTION FUNCTION_NAME(FUNCTION_PARAMETERS(S))
	RETURNS DATATYPE
	{CHARACTERISTISTICS}
	FUN_BODY;
	BEGIN
	END
	//
TO CALL FUNCTION USING SELECT COMMAND
EXAMPLE SELECT my_function(10, 'abc') AS result;

Ex
DELIMITER //
CREATE FUNCTION GRAD2(percent decimal)
returns varchar(10)
deterministic
begin
declare G varchar(5);
if (percent >=33) and (percent<=40) then
set G="C";
elseif (percent>40 and percent<60)  then
set G="B";
elseif (percent>=60)  then
set G="A";
else 
set G= fail;
end if;
return(G);
end
//
select s_name,percent,GRAD2(percent) from student;


* ACID Property:
   Any Transaction follow ACID Property,ACID property stands for A for automicity,C for consistency,isolation,D for durability
   A for Either all or None
    * Atomicity :
	Transaction complete or failed
    * Consistency
	Before the transaction and after the transaction sum of money should be same.
	A=2000
	B=3000

	Both 
	Before the transaction the sum of the money

	A+B =5000
 	 A account transfer 1000 RS to account B
  	After the transaction sum of the money same
 	A=A-1000 Remain=1000
	 B=B+1000 remain=4000
 	 A+B=5000
	* Isolation:
	  One transaction not affect to another Transaction.
	Ex-
	Multiple transaction not affect to each other.

Durability
Permanent changes in the database


EX
* ACID (Atomicity, Consistency, Isolation, Durability) 

properties are fundamental concepts in database management systems, ensuring reliability and integrity of transactions. 
Here's an example illustrating each of the ACID properties within MySQL:

Atomicity:
Atomicity ensures that a transaction is treated as a single unit of work, either all of its operations are executed or none. For example, consider a bank transfer:

sql
Copy code
START TRANSACTION;
UPDATE accounts SET balance = balance - 100 WHERE id = 123;  -- Deduct $100 from account 123
UPDATE accounts SET balance = balance + 100 WHERE id = 456;  -- Add $100 to account 456
COMMIT;
If any of the updates fail (due to system failure, constraint violation, etc.), the entire transaction will be rolled back, ensuring that the database remains in a consistent state.

Consistency:
Consistency ensures that only valid data is written to the database. For example, consider a scenario where you have a constraint that ensures account balances cannot be negative. If an update violates this constraint, the transaction will fail and the database will remain consistent.

sql
Copy code
CREATE TABLE accounts (
    id INT PRIMARY KEY,
    balance DECIMAL(10, 2) NOT NULL CHECK (balance >= 0)
);
Isolation:
Isolation ensures that concurrent execution of transactions results in a system state that could have been obtained if transactions were executed sequentially. For example, consider two transactions updating the same account balance:

sql
Copy code
-- Transaction 1
START TRANSACTION;
UPDATE accounts SET balance = balance - 50 WHERE id = 123;  -- Deduct $50 from account 123

-- Transaction 2
START TRANSACTION;
UPDATE accounts SET balance = balance - 30 WHERE id = 123;  -- Deduct $30 from account 123

-- Both transactions complete
COMMIT;
Isolation ensures that the final state of the database is consistent, regardless of the order in which transactions are executed.

Durability:
Durability ensures that once a transaction is committed, it will remain so even in the event of power loss, crashes, or errors. MySQL ensures durability by writing transactions to the transaction log before they are committed.

In summary, MySQL implements ACID properties to maintain the integrity, reliability, and consistency of the data stored in the database, providing a robust foundation for transaction management.



* Join Operation

	A join operation in the context of databases is a fundamental 
	concept used to combine rows from two or more tables based on a related column between them.
	It allows you to retrieve data from multiple tables in a single query by specifying how the rows from one 
	table relate to the rows in another table(s).

	There are 5 types of join
	
	*Inner Join: Returns rows when there is a match in both tables based on the join condition.
	Syntax->
	SELECT * FROM table1
	INNER JOIN table2 ON table1.column_name = table2.column_name;

	*Left Join (or Left Outer Join): Returns all rows from the left table (first table mentioned) and matching rows from the right table. 
	If there is no match, NULL values are returned for the columns of the right table.

	SELECT * 
	FROM table1
	*LEFT JOIN table2 ON table1.column_name = table2.column_name;

	* Right Join (or Right Outer Join): Returns all rows from the right table and matching rows from the left table.
	  If there is no match, NULL values are returned for the columns of the left table.


	  SELECT * 
	  FROM table1
	  RIGHT JOIN table2 ON table1.column_name = table2.column_name;
	


	* Full Outer Join: Returns all rows when there is a match in either table. 
	It combines the results of both left and right outer joins.

	SELECT * 
	FROM table1
	FULL OUTER JOIN table2 ON table1.column_name = table2.column_name;



* Retrieve data from multiple  tables
select student.sid,student.sname,enroll.enid,enroll.crs_name as course_name,enroll.crs_fees,payment.sfess as submit_fess from student join enroll on student.sid=enroll.sid
join payment on enroll.enid=payment.enid

Component of ER- Diagram-https://bit.ly/3VnguDV
