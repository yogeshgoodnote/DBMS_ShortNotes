Dbms:
  ->Dbms stands for the database management system
  -> It is software or application that allows to insert, update, delete, and manage the database
  -> Database->Processed information.

There are 5 types of DBMS Languages
              
  1 DDL-DDL statements are used to specify the schema of the 
    database.
  DDL commands-create, drop, alter, rename
  Syntax-create database Db_name
  create database School
  
Table Creation
  table statement is used  to create a table
  create table table_name( column_name datatype,column_name datatype,.....)
  create table tb_staff(s_name varchar(10),s_id int,s_mobile int))
  To see Table Structure 
  DESCRIBE staff;

DROP TABLE Statement
  drop statement is used to delete a table
  drop table tb_name
  drop table tb_staff

ALTER TABLE Statement
  Alter statement is used to add, modify, and delete the column in the existing table.
  ALTER TABLE - ADD Column
  alter table tb_name(column_name Data_type)
  alter table tb_staff salary int

ALTER TABLE - DROP COLUMN
  The Alter command is used to delete a column in an existing table
  Syntax-
  alter table table_name drop column_name
  alter table tb_staff drop salary;

ALTER TABLE-MODIFY COLUMN
  It is used to change a data type in a column
  alter table table_name existing_column_name change datatype name
  alter table table _name

TRUNCATE-TO DELETE TABLE DATA(EMPTY TABLE)
  Syntax-
  truncate table_name;
  ex truncate tb_staff;
-------------------------------------------------------------------------
2 DML-DML Statements are used to manipulate/change data in the database. 
    DML Commands-insert, update, delete
    Insert statement:- Insert statement is used to add a new record in a table
    Syntax -insert into table_name (column_name1,column_name2......)values(C1_value,c2_value,c3_value3)
    Ex-insert into table_name (s_name,s_id,s_mobile) values("Rohit",1,812056)
    select *from table_name;

    UPDATE COMMAND: Update command used to modify the existing record of a table.
    update table_name set column1=value,coulumn2=value2,column3=value3 where condition
    update tb_staff set s_name="Rohit" where s_id=101;

    A delete statement is used to delete a record in the table
    delete from table_name where condition
    EX- delete from tb_staff where s_id="101";

3   DQL-DQL Stands for Data Query Language.
        ->DQL statement is used to retrieve a record from a table.
        syntax
        select * from table_name where condition
        Ex select S_name * from tb_staff where s_id="101"
----------------------------------------------------------------------------------------------------------
4   DCL -
*Full-form Data control language
* Dcl statements are used to control user access privileges
* Privileges-Insert, update, delete, All privileges, etc

* There are two commands in DCL Statements-
 	1 GRANT Command-It is used to give privileges to the user
		Syntax-

		Grant Privileges on DataBase_name.Table_name to yogesh@hostName;
		Ex-

		GRANT SELECT ON school. staff to yogesh@localhost;

		
 	2 REVOKE Command - The REVOKE statement is used to remove permission/privileges from a user that was previously granted
		Syntax

		REVOKE PRIVILEGES ON DATABASE_NAME.TABLE_NAME FROM USER_NAME@HOSTNAME;

		EX

		REVOKE SELECT ON school. staff from yogesh@hostname;
-------------------------------------------------------------------------------------------------------------------------------------
	
	Extra Commands
	User Creation
 	 CREATE USER 'username'@'hostname' IDENTIFIED BY 'password';
	To Drop user
	DROP USER 'username'@'hostname';
	Ex
	DROP USER yogi@localhost;
  	create database yo;
	To see User
 	select user from mysql.user;
	Show databases
 	 SHOW TABLES FROM urdatabase_name;
	Select database
	  USE clg;
 	 show databases;
	TO SEE tables
	show tables;
 	 Exit MySQL/logout user from mysql
   	 \q
	Note *After executing the REVOKE statement, you need to run FLUSH PRIVILEGES; to apply the changes immediately:
------------------------------------------------------------------------------------------------------------------------------
	
	5. TCL stands for Transaction control language.
	TCL statements are used to control transactions in the database.
	There are two tcl statements-
	* COMMIT- This command is used to permanently save the changes made during the current transaction.
	 COMMIT;
	* ROLLBACK: This command is used to undo the changes made during the current transaction.
	ROLLBACK;
	* ROLLBACK TO SAVEPOINT: This command rolls back the current transaction to a specified savepoint.
	ROLLBACK TO SAVEPOINT savepoint_name;
	5 Entry save point k bad tuna hi roll back Karega


DBMS Key
7 types of key
ACC -SPUF
1   Alternate Key-jo candidate key primary key nhi banti use alternane key hoti h
-- Create users table
CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) UNIQUE,  -- Alternate Key
    email VARCHAR(100) UNIQUE,     -- Primary Key
    full_name VARCHAR(100),
    birthdate DATE
);

-- Insert data into the users table
INSERT INTO users (user_id, username, email, full_name, birthdate) 
VALUES (1, 'john_doe', 'john@example.com', 'John Doe', '1990-01-15');

2   Composite key
3   candidate key
4   super key
5   primary key
6   unique key
7   foreign key

1 Super key- a set of attributes that can uniquely identify a record

Ex (P_id,P_name)

2 Candidate Key-
* Minimal set of super key.
* In a table, there can be multiple candidate keys
* Each candidate key must be unique across all records in the table.
* The candidate key is a potential primary key but is not necessarily chosen as the primary key.
Ex P_id
3 Primary Key
 the primary key has two property
 1>Unique
 2>NotNull
Ex UID
3 Foreign key-foreign key is a field (or collection of fields) in one table, that refers to the primary key in another table
CREATE TABLE students (
    student_id INT PRIMARY KEY,
    student_name VARCHAR(50)
);
create table Booking(
Book_id int primary key,
date_of_issue date,
foreign key (student_id) REFERENCES student(student_id));

Composite key- A composite key is the combination of two or more attributes that can uniquely a record.
CREATE TABLE student_enrollment (
    student_id INT,
    course_id INT,
    enrollment_date DATE,
    PRIMARY KEY (student_id, course_id)
);

What is a Unique Key?
Unique Keys are the keys that define the record uniquely in the table. 
It is different from Primary Keys, as Unique Key can contain one NULL value but Primary Key does not contain any NULL values.

Triggers in MySQL
trigger is a special type of stored procedure that occurs on a certain event response.
Syntax-
CREATE TRIGGER TRIGGER_NAME TRIGGER_TIME TRIGGER_EVENT 
ON TABLE_NAME FOR EACH ROW
BEGIN
--VARIABLE DECLAERTION
--TRIGGER CODE
END;
or

A trigger is a set of instructions or actions
automatically performed ("triggered") in response to certain events on a particular table.
Each Trigger is associated with the table activated on any DML statement such as INSERT, UPDATE, or DELETE.

There are two types of triggers:

1 BEFORE Triggers:

These triggers are executed before the triggering event (e.g., before an INSERT, UPDATE, or DELETE operation).
They can be used to validate or modify the data before it is actually updated in the table.


2 AFTER Triggers:

These triggers are executed after the tr
has occurred.
They are commonly used for tasks such as updating other tables, logging changes, or sending notifications.

Syntax-
CREATE TRIGGER TRIGGER_NAME TRIGGER_TIME TRIGGER_EVENT 
ON TABLE_NAME FOR EACH ROW
BEGIN
--VARIABLE DECLAERTION
--TRIGGER CODE
END;

Example
create database bank;
use bank;
create table Accnt(Acc_no int primary key auto_increment,acc_name varchar(20));
create table balance(Acc_no int,amt decimal,foreign key(Acc_no) references Accnt(Acc_no));
delimiter //
create trigger tig after insert on Accnt for each row 
begin
insert into balance (Acc_no,amt) values(new.Acc_no,1000);
end
//

select * from Accnt;
select * from balance;
insert into Accnt (acc_name) values('rohit');
-----------------------------------------------------------------------------------------------------------------------------

Stored Procedure -

* A stored procedure is a collection of pre-compiled SQL statements
* Stored Procedures are created to perform one or one DML operation on the Database.

Here are some key characteristics and benefits of stored procedures:

Encapsulation: Stored procedures allow you to encapsulate a set of SQL statements or procedural logic into a single unit, making it easier to manage and maintain.

Reusability: Once created, stored procedures can be reused in multiple parts of an application or by different applications. This promotes code reuse and helps maintain consistency.

Performance: Stored procedures are precompiled and stored in a compiled form, which can improve performance as they reduce the overhead of parsing and compiling the SQL statements each time they are executed.

Security: Stored procedures can be used to control access to data by defining and controlling the execution of specific operations. Users may only have permission to execute a stored procedure and not direct access to the underlying tables.

Modularity: Stored procedures support modular programming by breaking down complex logic into smaller, more manageable units. This can enhance code readability and maintenance.

Transaction Management: Stored procedures can be used to wrap multiple SQL statements within a transaction, ensuring that either all statements within the procedure execute successfully or none at all.


SHOW PROCEDURE STATUS;
----------------------------------------------------------------------------------------------------------------------------------------
delimiter //
create procedure procedure name([in | OUT | INOUT] PARAMETER_name datatype)
BEGIN
Declear_Section
Executable_section
//

Default Parameter
Example
delimiter //
create procedure Data_insert3()
begin
select * from accnt;
end
//

To execute a stored procedure
call Data_insert3();

-------------------------------------------------------------------------------------------------------------------------------------

In Parameter: 
in parameter ka use input parameter ki tarah kiya jata h
isme jab ham procedure ko call karte h tab  parameter ki value ko procedure ki body m execute ho rahe code k liye use kiya jata h .

Ex
create database bank;
use bank;
create table student(S_id int primary key auto_increment,S_name varchar(10));
delimiter //
create procedure Put_Data(in S_Name varchar(10))
begin
insert into student(S_name) values(S_Name);
end
//

delimiter //
create procedure Get_Data(in n int)
begin
select * from student limit n;
end
//
Call Procedure
call Put_Data('rohit');
call Get_Data(1);

OUT Parameter:
OUT Parameter ka use OUT Put parameter ki tarah kiya jata h.
Isme ham kisi procedure ki value ko procedure ke bahar bhi use kar skte h.
delimiter //

create procedure max_percent3(out m int)
begin
select max(percentage) into m from student;
end
//
call max_percent3(@M);
select @M
--------------------------------------------------------------------

INOUT-
Is parameter ka use in parameter aur out parameter dono ki tarah kiya jata h.
Ex

	delimiter //
	create procedure P(inout vari)
	begin
	select S_name into vari from student where percentage >vari;
	end
	//
	call p(@outdata)
)

Stored Function:

* In MySQL, a function is a set of SQL statements.
* it is associated with the database.
* a function must return a single value but the procedure can be or not.
* a function uses only input parameters but the procedure uses in, out,inout parameter
* function can be called within  the procedure but procedure can't be called within the function.

TO SEE FUNCTION
SHOW FUNCTION STATUS;
To see the source code of a specific function
SHOW CREATE FUNCTION your_function_name;
TO DELETE FUNCTION
DROP FUNCTION [IF EXISTS] function_name;


 SYNTAX-
	DELIMITERS //
	CREATE FUNCTION FUNCTION_NAME(FUNCTION_PARAMETERS(S))
	RETURNS DATATYPE
	{CHARACTERISTISTICS}
	FUN_BODY;
	BEGIN
	END
	//
Ex
DELIMITER //
CREATE FUNCTION GRAD2(percent decimal)
returns varchar(10)
deterministic
begin
declare G varchar(5);
if (percent >=33) and (percent<=40) then
set G="C";
elseif (percent>40 and percent<60)  then
set G="B";
elseif (percent>=60)  then
set G="A";
else 
set G= fail;
end if;
return(G);
end
//
select s_name,percent,GRAD2(percent) from student;
